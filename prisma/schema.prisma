datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

model User {
  ///@zod.optional()
  id String @id @default(cuid())

  email     String   @unique
  ///@zod.optional()
  avatar    String   @default("defaultAvatar")
  theme     String   @default("dark")
  lastLogin DateTime @default(now())
  ///@zod.optional()
  createdAt DateTime @default(now())
  ///@zod.optional()
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  items    ListItems[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

// I Add zod.optional to fields that are implicitly known when you create records, that way you can use zod to validate forms.
model Note {
  ///@zod.optional()
  id    String @id @default(cuid())
  title String
  body  String

  ///@zod.optional()
  createdAt DateTime @default(now())
  ///@zod.optional()
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ///@zod.optional()
  userId String
}

model ListItems {
  ///@zod.optional()
  id            Int      @id @default(autoincrement())
  ///@zod.optional()
  cuid          String   @unique @default(cuid())
  item          String
  ///@zod.optional()
  softDelete    Boolean  @default(false)
  ///@zod.optional()
  lastPurchased DateTime @default(now())
  ///@zod.optional()
  createdAt     DateTime @default(now())
  ///@zod.optional()
  updatedAt     DateTime @updatedAt

  ///@zod.optional()
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
